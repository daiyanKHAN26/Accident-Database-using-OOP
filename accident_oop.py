# -*- coding: utf-8 -*-
"""cse474-lab2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aPnSJATwTVZMvupYHdeUyk8vG1pRh-GG
"""

from datetime import datetime
import math

################# CLASS INITIALISATION ###############################

# Parent class initialised
class Accident:
  def __init__(self, bT, eT, loc, noc, cas_list, noi,inj_list, fLoss):
    self.bT=bT                                                              # beginning time of accident
    self.eT=eT                                                              # ending time of accident
    self.loc=str(loc)                                                       # location of accident
    self.noc=noc                                                            # number of casualties
    self.noi=noi                                                            # number of injuries   
    self.fLoss= fLoss                                                       # financial loss
    self.cas_list=cas_list                                                  # list of casualties
    self.inj_list=inj_list                                                  # list of injuries
    self.imp= math.log(noi+1)+math.sqrt(noc)+(math.pow(1.12,(fLoss/100)))   # impact factor

  def __str__(self):
    return ''' --------- "Other" accident details: --------- 
  Begin time: {}
  End time: {}
  Location: {}                                    
  Num of casualties: {}
  Casualty list: {}
  Num of injuries: {}
  Injury list: {}
  Financial loss: BDT {}'''.format(self.bT,self.eT,self.loc,self.noc,self.cas_list,self.noi,self.inj_list,self.fLoss)

# road accident subclass
class road_acc(Accident):                       
  
  # 'list of cars' attribute added
  def __init__(self, bT, eT, loc, noc, cas_list, noi, inj_list, fLoss, car_list):
    super().__init__(bT, eT, loc, noc, cas_list, noi, inj_list, fLoss)
    self.car_list=car_list                       
  
  # __str__ method introduced to print results
  def __str__(self):                            
    return ''' --------- Car accident details: --------- 
  Begin time: {}
  End time: {}
  Location: {}                                    
  Num of casualties: {}
  Casualty list: {}
  Num of injuries: {}
  Injury list: {}
  Financial loss: BDT {}
  List of cars: {}'''.format(self.bT,self.eT,self.loc,self.noc,self.cas_list,self.noi,self.inj_list,self.fLoss,self.car_list)


# plane crash subclass
class plane_acc(Accident): 
  def __init__(self, bT, eT, loc, noc, cas_list, noi, inj_list, fLoss, plane_list):
    super().__init__(bT, eT, loc, noc, cas_list, noi, inj_list, fLoss)
    self.plane_list=plane_list # list of planes attribute added
  def __str__(self):
    return ''' --------- Plane crash details: --------- 
  Begin time: {}
  End time: {}
  Location: {}
  Num of casualties: {}
  Casualty list: {}
  Num of injuries: {}
  Injury list: {}
  Financial loss: BDT {}
  List of planes: {}'''.format(self.bT,self.eT,self.loc,self.noc,self.cas_list,self.noi,self.inj_list,self.fLoss,self.plane_list) 

# fire accident subclass
class fire_acc(Accident): 
  def __init__(self, bT, eT, loc, noc, cas_list, noi, inj_list, fLoss, fire_src):
    super().__init__(bT, eT, loc, noc, cas_list, noi, inj_list, fLoss)
    self.fire_src=fire_src # source of fire attribute added
  def __str__(self):
    return ''' --------- Fire accident details: --------- 
  Begin time: {}
  End time: {}
  Location: {}
  Num of casualties: {}
  Casualty list: {}
  Num of injuries: {}
  Injury list: {}
  Financial loss: BDT {}
  Source of fire: {}'''.format(self.bT,self.eT,self.loc,self.noc,self.cas_list,self.noi,self.inj_list,self.fLoss,self.fire_src)

 # marine accident subclass
class mar_acc(Accident): 
  def __init__(self, bT, eT, loc, noc, cas_list, noi, inj_list, fLoss, launchtrack_num):
    super().__init__(bT, eT, loc, noc,  as_list, noi, inj_list, fLoss)
    self.launchtrack_num=launchtrack_num # launch tracking number attribute added
  def __str__(self):
    return ''' --------- Marine accident details: --------- 
  Begin time: {}
  End time: {}
  Location: {}
  Num of casualties: {}
  Casualty list: {}
  Num of injuries: {}
  Injury list: {}
  Financial loss: BDT {}
  Launch tracking number: {}'''.format(self.bT,self.eT,self.loc,self.noc,self.cas_list,self.noi,self.inj_list,self.fLoss,self.launchtrack_num)

###################### DRIVER CODE ###############################

# TIME INPUT:
# a decision tree is implemented to check if starting and ending
# time of accident has been recorded. The conditions are as follows:
#
#   > Check if start time is available. If true, it is recorded
#     and we move to end time. If end time available, record
#     end time, else end time = start time
#
#   > If start time unavailable, set start as null. Check if
#     end time is available. If true, record end time. If
#     both start and end unavailable, set start=end=2021 

check = input('Is start time recorded? (y/n): ')
if check in ('y','Y'):
  start = str(input('Enter start time of accident (hh:mm dd-mm-yyyy): '))
  bT= datetime.strptime(start, "%H:%M %d-%m-%Y")
  check = input('Is end time recorded? (y/n): ')
  if check in ('y','Y'):
    end = str(input('Enter end time of accident (hh:mm dd-mm-yyyy): '))
    eT= datetime.strptime(end, "%H:%M %d-%m-%Y")
  elif check in ('n','N'):
    eT=bT    

elif check in ('n','N'):
  bt=0
  check = input('Is end time recorded? (y/n): ')
  if check in ('y','Y'):
    end = str(input('Enter end time of accident (hh:mm dd-mm-yyyy): '))
    eT= datetime.strptime(end, "%H:%M %d-%m-%Y")
  elif check in ('n','N'):
    bT=2021
    eT=bT


# Location input:
# if null or unspecified, value set to 'Dhaka'

loc=str(input('Enter accident location (enter X if unknown): '))
if loc in ('x','X'):
  loc = 'Dhaka'


# Casualty list:
# Number of casualties (noc) is taken as integer value.
# Dictionary is created recording name, age and NID for
# a total number of 'n' entries where n = noc.

noc=int(input('Enter number of casualties: '))
cas_list = []
for i in range(0,noc):
  name = str(input('Enter name of casualty: '))
  age = int(input('Enter age: '))
  nid = int(input('Enter NID num: '))
  cas_list.append(name)
  cas_list.append(age)
  cas_list.append(NID)

# Injury list:
# Same method of working as Casualty list, replace 
# 'noc' & 'cas_list' with 'noi' & 'inj_list'

noi=int(input('Enter number of injuries: '))
inj_list = []
for i in range(0,noi):
  name = str(input('Enter name of injured: '))
  age = int(input('Enter age: '))
  nid = int(input('Enter NID num: '))
  inj_list.append(name)
  inj_list.append(age)
  inj_list.append(NID)  

# Financial loss:
fLoss=int(input('Enter financial loss: BDT '))

# check accident type and call corresponding subclass/child
print("""What type of accident? 
1. Car accident
2. Plane crash
3. Fire accident
4. Marine accident
5. Other""")
acc_type=int(input('Enter corresponding number: '))

#call car accident subclass
if acc_type == 1:
  car_num=int(input('Enter number of cars: '))
  car_list = []
  for i in range(0,car_num):
    name = str(input('Enter name of car: '))
    car_list.append(name)
  list = road_acc(bT, eT, loc, noc,  cas_list, noi, inj_list, fLoss,car_list)
  print(list)
  print("   Impact factor: ",list.imp)

#call plane crash subclass
elif acc_type == 2:
  plane_num=int(input('Enter number of planes: '))
  plane_list = []
  for i in range(0,plane_num):
    name = str(input('Enter name of plane: '))
    plane_list.append(name)
  list=plane_acc(bT, eT, loc, noc,  cas_list, noi, inj_list, fLoss,plane_list)
  print(list)
  print("   Impact factor: ",list.imp)

#call fire accident subclass
elif acc_type == 3:
  fire_src=str(input('Enter source of fire: '))
  list=fire_acc(bT, eT, loc, noc,  cas_list, noi, inj_list, fLoss,fire_src)
  print(list)
  print("   Impact factor: ",list.imp)

#call marine accident subclass
elif acc_type == 4:
  launchtrack_num=float(input('Enter launch tracking num: '))
  list=plane_acc(bT, eT, loc, noc,  cas_list, noi, inj_list, fLoss,launchtrack_num)
  print(list)
  print("   Impact factor: ",list.imp)

#if no subclass called
else:
  list=Accident(bT, eT, loc, noc,  cas_list, noi, inj_list, fLoss)
  print(list)
  print("   Impact factor: ",list.imp)
n

"""Begin time: % s
    End time: % s
    Location: % s
    Num of casualties: % s
    Casualty list: % s
    Num of injuries % s
    Injury list: % s
    Financial loss: % s
    List of cars: % s""" 

10:10 1-1-2020

"""Begin time: % s
    End time: % s
    Location: % s
    Num of casualties: % s
    Casualty list: % s
    Num of injuries % s
    Injury list: % s
    Financial loss: % s
    List of cars: % s""" 

10:10 1-1-2020